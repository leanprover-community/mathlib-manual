on:
  push:
    branches:
      - main
      - 'lean-pr-testing-*'
  pull_request:
    branches:
      - main
      - nightly-testing
  release:
    types:
      - published
      - released

name: "Build and check HTML"

jobs:
  build:
    name: Build site and generate HTML
    runs-on: ubuntu-latest

    steps:
      - name: Install deps for figures (OS packages)
        run: |
          sudo apt update && sudo apt install -y poppler-utils

      - name: Install deps for figures (TeX)
        uses: zauguin/install-texlive@v4
        with:
          texlive_version: 2025
          packages: |
            scheme-small
            latex-bin
            fontspec
            standalone
            pgf
            pdftexcmds
            luatex85
            lualatex-math
            infwarerr
            ltxcmds
            xcolor
            fontawesome
            spath3
            inter
            epstopdf-pkg
            tex-gyre
            tex-gyre-math
            unicode-math
            amsmath
            sourcecodepro

      - name: Do we have lualatex?
        run: |
          lualatex --version

      - name: Install elan
        run: |
          set -o pipefail
          curl -sSfL https://github.com/leanprover/elan/releases/download/v4.1.2/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
          ./elan-init -y --default-toolchain none
          echo "$HOME/.elan/bin" >> "$GITHUB_PATH"

      - uses: actions/checkout@v4

      - name: Lean Version
        run: |
          lean --version

      - name: Cache .lake
        uses: actions/cache/restore@v4
        with:
          path: .lake
          key: ${{ runner.os }}-${{ hashFiles('lean-toolchain') }}-${{ hashFiles('lake-manifest.json') }}-${{ hashFiles('lakefile.lean') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('lean-toolchain') }}-${{ hashFiles('lake-manifest.json') }}-${{ hashFiles('lakefile.lean') }}-${{ github.sha }}
            ${{ runner.os }}-${{ hashFiles('lean-toolchain') }}-${{ hashFiles('lake-manifest.json') }}-${{ hashFiles('lakefile.lean') }}
            ${{ runner.os }}-${{ hashFiles('lean-toolchain') }}-${{ hashFiles('lake-manifest.json') }}-
            ${{ runner.os }}-${{ hashFiles('lean-toolchain') }}-

      - name: Build
        id: build
        run: |
          lake exe cache get
          lake build

      - name: Save cache for .lake
        uses: actions/cache/save@v4
        with:
          path: .lake
          key: ${{ runner.os }}-${{ hashFiles('lean-toolchain') }}-${{ hashFiles('lake-manifest.json') }}-${{ hashFiles('lakefile.lean') }}-${{ github.sha }}

      - name: Generate HTML
        run: |
          lake --quiet exe generate-manual --depth 2 --with-word-count "words.txt" --verbose --without-html-single

      - name: Generate proofreading HTML
        if: github.event_name == 'pull_request'
        id: generate
        run: |
          lake --quiet exe generate-manual --depth 2 --verbose --draft --without-html-single --output "_out/draft"

      - name: Upload static files as artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_out/'

      - name: Report word count
        run: |
          echo "Word Counts"
          echo "-----------"
          cat words.txt

      - name: Save word count
        run: |
          echo "# Word Counts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat words.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Set up Python for link checker
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install LinkChecker
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        run: |
          python -m pip install --upgrade pip
          pip install linkchecker

      - name: Run LinkChecker (local links only)
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        run: |
          linkchecker './_out/html-multi/'

  # Deploy job
  deploy:
    # only deploy on main
    if: github.ref == 'refs/heads/main'
    # Add a dependency to the build job
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  type-check-js:
    name: Check search JS code with TypeScript
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Get generated HTML from artifact storage
        uses: actions/download-artifact@v4
        with:
          name: 'html'
          path: '_out/'

      - name: Install TypeScript
        run: |
          sudo apt update && sudo apt install node-typescript

      - name: Type check the search bar code
        run: |
          cd _out/html-multi/-verso-search
          tsc --noEmit -p jsconfig.json

